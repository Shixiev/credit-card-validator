package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
	"unicode"
)

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---

// Bank ‚Äî —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–µ –∏ –µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ BIN
type Bank struct {
	Name    string
	BinFrom int
	BinTo   int
}

// loadBankData –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
func loadBankData(path string) ([]Bank, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª %s: %w", path, err)
	}
	defer f.Close()

	var banks []Bank
	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" {
			continue
		}
		parts := strings.SplitN(line, ",", 3)
		if len(parts) != 3 {
			continue
		}

		name := strings.TrimSpace(parts[0])
		from, _ := strconv.Atoi(strings.TrimSpace(parts[1]))
		to, _ := strconv.Atoi(strings.TrimSpace(parts[2]))

		banks = append(banks, Bank{
			Name:    name,
			BinFrom: from,
			BinTo:   to,
		})
	}

	return banks, scanner.Err()
}

// getUserInput —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserInput() string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
	input, _ := reader.ReadString('\n')
	return strings.TrimSpace(input)
}

// validateInput –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (13‚Äì19 —Ü–∏—Ñ—Ä, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞)
func validateInput(cardNumber string) bool {
	if len(cardNumber) < 13 || len(cardNumber) > 19 {
		return false
	}
	for _, r := range cardNumber {
		if !unicode.IsDigit(r) {
			return false
		}
	}
	return true
}

// validateLuhn –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
func validateLuhn(cardNumber string) bool {
	sum := 0
	double := false
	for i := len(cardNumber) - 1; i >= 0; i-- {
		digit := int(cardNumber[i] - '0')
		if double {
			digit *= 2
			if digit > 9 {
				digit -= 9
			}
		}
		sum += digit
		double = !double
	}
	return sum%10 == 0
}

// extractBIN –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –∫–∞–∫ int
func extractBIN(cardNumber string) int {
	if len(cardNumber) < 6 {
		return 0
	}
	bin, _ := strconv.Atoi(cardNumber[:6])
	return bin
}

// identifyBank –∏—â–µ—Ç –±–∞–Ω–∫ –ø–æ BIN
func identifyBank(bin int, banks []Bank) string {
	for _, bank := range banks {
		if bin >= bank.BinFrom && bin <= bank.BinTo {
			return bank.Name
		}
	}
	return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–º–∏—Ç–µ–Ω—Ç"
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---
func main() {
	fmt.Println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç! üöÄ")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–∫–∏
	banks, err := loadBankData("banks.txt")
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤:", err)
		return
	}
	fmt.Println("‚úÖ –î–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
	for {
		cardNumber := getUserInput()

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
		if cardNumber == "" {
			fmt.Println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üëã")
			break
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
		if !validateInput(cardNumber) {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (13‚Äì19 —Å–∏–º–≤–æ–ª–æ–≤).")
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –õ—É–Ω–∞
		if !validateLuhn(cardNumber) {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞.")
			continue
		}

		// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞
		bin := extractBIN(cardNumber)
		bankName := identifyBank(bin, banks)

		// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		fmt.Println("‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–∞–ª–∏–¥–µ–Ω.")
		fmt.Println("üè¶ –ë–∞–Ω–∫:", bankName)
		fmt.Println()
	}
}